// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#include "config.h"
#include "StyleBuilderGenerated.h"

#include "CSSPrimitiveValueMappings.h"
#include "CSSProperty.h"
#include "RenderStyleSetters.h"
#include "StyleBuilderConverter.h"
#include "StyleBuilderCustom.h"
#include "StyleBuilderState.h"
#include "StylePropertyShorthand.h"

namespace WebCore {
namespace Style {

class BuilderFunctions {
public:
    static void applyInitialTestTopPriority(BuilderState& builderState)
    {
        builderState.style().setTestTopPriority(RenderStyle::initialTestTopPriority());
    }
    static void applyInheritTestTopPriority(BuilderState& builderState)
    {
        builderState.style().setTestTopPriority(forwardInheritedValue(builderState.parentStyle().testTopPriority()));
    }
    static void applyValueTestTopPriority(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestTopPriority(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestHighPriority(BuilderState& builderState)
    {
        builderState.style().setTestHighPriority(RenderStyle::initialTestHighPriority());
    }
    static void applyInheritTestHighPriority(BuilderState& builderState)
    {
        builderState.style().setTestHighPriority(forwardInheritedValue(builderState.parentStyle().testHighPriority()));
    }
    static void applyValueTestHighPriority(BuilderState& builderState, CSSValue& value)
    {
        if (CSSPropertyParserHelpers::isSystemFontShorthand(value.valueID())) {
            applyInitialTestHighPriority(builderState);
            return;
        }
        builderState.style().setTestHighPriority(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestAnimationWrapper(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapper(RenderStyle::initialTestAnimationWrapper());
    }
    static void applyInheritTestAnimationWrapper(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapper(forwardInheritedValue(builderState.parentStyle().testAnimationWrapper()));
    }
    static void applyValueTestAnimationWrapper(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestAnimationWrapper(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestAnimationWrapperAccelerationAlways(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationAlways(RenderStyle::initialTestAnimationWrapperAccelerationAlways());
    }
    static void applyInheritTestAnimationWrapperAccelerationAlways(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationAlways(forwardInheritedValue(builderState.parentStyle().testAnimationWrapperAccelerationAlways()));
    }
    static void applyValueTestAnimationWrapperAccelerationAlways(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestAnimationWrapperAccelerationAlways(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestAnimationWrapperAccelerationThreadedOnly(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationThreadedOnly(RenderStyle::initialTestAnimationWrapperAccelerationThreadedOnly());
    }
    static void applyInheritTestAnimationWrapperAccelerationThreadedOnly(BuilderState& builderState)
    {
        builderState.style().setTestAnimationWrapperAccelerationThreadedOnly(forwardInheritedValue(builderState.parentStyle().testAnimationWrapperAccelerationThreadedOnly()));
    }
    static void applyValueTestAnimationWrapperAccelerationThreadedOnly(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestAnimationWrapperAccelerationThreadedOnly(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestProperty(BuilderState& builderState)
    {
        builderState.style().setTestProperty(RenderStyle::initialTestProperty());
    }
    static void applyInheritTestProperty(BuilderState& builderState)
    {
        builderState.style().setTestProperty(forwardInheritedValue(builderState.parentStyle().testProperty()));
    }
    static void applyValueTestProperty(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestProperty(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestSettingsOne(BuilderState& builderState)
    {
        builderState.style().setTestSettingsOne(RenderStyle::initialTestSettingsOne());
    }
    static void applyInheritTestSettingsOne(BuilderState& builderState)
    {
        builderState.style().setTestSettingsOne(forwardInheritedValue(builderState.parentStyle().testSettingsOne()));
    }
    static void applyValueTestSettingsOne(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestSettingsOne(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestUsingSharedRule(BuilderState& builderState)
    {
        builderState.style().setTestUsingSharedRule(RenderStyle::initialTestUsingSharedRule());
    }
    static void applyInheritTestUsingSharedRule(BuilderState& builderState)
    {
        builderState.style().setTestUsingSharedRule(forwardInheritedValue(builderState.parentStyle().testUsingSharedRule()));
    }
    static void applyValueTestUsingSharedRule(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestUsingSharedRule(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestSinkPriority(BuilderState& builderState)
    {
        builderState.style().setTestSinkPriority(RenderStyle::initialTestSinkPriority());
    }
    static void applyInheritTestSinkPriority(BuilderState& builderState)
    {
        builderState.style().setTestSinkPriority(forwardInheritedValue(builderState.parentStyle().testSinkPriority()));
    }
    static void applyValueTestSinkPriority(BuilderState& builderState, CSSValue& value)
    {
        if (CSSPropertyParserHelpers::isSystemFontShorthand(value.valueID())) {
            applyInitialTestSinkPriority(builderState);
            return;
        }
        builderState.style().setTestSinkPriority(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestLogicalPropertyGroupPhysicalHorizontal(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalHorizontal(RenderStyle::initialTestLogicalPropertyGroupPhysicalHorizontal());
    }
    static void applyInheritTestLogicalPropertyGroupPhysicalHorizontal(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalHorizontal(forwardInheritedValue(builderState.parentStyle().testLogicalPropertyGroupPhysicalHorizontal()));
    }
    static void applyValueTestLogicalPropertyGroupPhysicalHorizontal(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalHorizontal(fromCSSValueDeducingType(builderState, value));
    }
    static void applyInitialTestLogicalPropertyGroupPhysicalVertical(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalVertical(RenderStyle::initialTestLogicalPropertyGroupPhysicalVertical());
    }
    static void applyInheritTestLogicalPropertyGroupPhysicalVertical(BuilderState& builderState)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalVertical(forwardInheritedValue(builderState.parentStyle().testLogicalPropertyGroupPhysicalVertical()));
    }
    static void applyValueTestLogicalPropertyGroupPhysicalVertical(BuilderState& builderState, CSSValue& value)
    {
        builderState.style().setTestLogicalPropertyGroupPhysicalVertical(fromCSSValueDeducingType(builderState, value));
    }
};

void BuilderGenerated::applyProperty(CSSPropertyID id, BuilderState& builderState, CSSValue& value, ApplyValueType valueType)
{
    switch (id) {
    case CSSPropertyID::CSSPropertyInvalid:
        break;
    case CSSPropertyID::CSSPropertyCustom:
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestTopPriority:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestTopPriority(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestTopPriority(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestTopPriority(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestHighPriority:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestHighPriority(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestHighPriority(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestHighPriority(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForFirstDescriptor:
        break;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForSecondDescriptor:
        break;
    case CSSPropertyID::CSSPropertyTestAnimationWrapper:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestAnimationWrapper(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestAnimationWrapper(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestAnimationWrapper(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationAlways:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestAnimationWrapperAccelerationAlways(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestAnimationWrapperAccelerationAlways(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestAnimationWrapperAccelerationAlways(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationThreadedOnly:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestAnimationWrapperAccelerationThreadedOnly(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestAnimationWrapperAccelerationThreadedOnly(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestAnimationWrapperAccelerationThreadedOnly(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestProperty:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestProperty(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestProperty(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestProperty(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestSettingsOne:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestSettingsOne(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestSettingsOne(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestSettingsOne(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestUsingSharedRule:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestUsingSharedRule(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestUsingSharedRule(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestUsingSharedRule(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestSinkPriority:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestSinkPriority(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestSinkPriority(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestSinkPriority(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock:
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalInline:
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestLogicalPropertyGroupPhysicalHorizontal(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestLogicalPropertyGroupPhysicalHorizontal(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestLogicalPropertyGroupPhysicalHorizontal(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical:
        switch (valueType) {
        case ApplyValueType::Initial:
            BuilderFunctions::applyInitialTestLogicalPropertyGroupPhysicalVertical(builderState);
            break;
        case ApplyValueType::Inherit:
            BuilderFunctions::applyInheritTestLogicalPropertyGroupPhysicalVertical(builderState);
            break;
        case ApplyValueType::Value:
            BuilderFunctions::applyValueTestLogicalPropertyGroupPhysicalVertical(builderState, value);
            break;
        }
        break;
    case CSSPropertyID::CSSPropertyFont:
        ASSERT(isShorthand(id));
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestShorthandOne:
        ASSERT(isShorthand(id));
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestShorthandTwo:
        ASSERT(isShorthand(id));
        ASSERT_NOT_REACHED();
        break;
    }
}

} // namespace WebCore
} // namespace Style

